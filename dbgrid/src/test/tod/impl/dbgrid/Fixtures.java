/*
TOD - Trace Oriented Debugger.
Copyright (c) 2006-2008, Guillaume Pothier
All rights reserved.

This program is free software; you can redistribute it and/or 
modify it under the terms of the GNU General Public License 
version 2 as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
General Public License for more details.

You should have received a copy of the GNU General Public License 
along with this program; if not, write to the Free Software 
Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
MA 02111-1307 USA

Parts of this work rely on the MD5 algorithm "derived from the 
RSA Data Security, Inc. MD5 Message-Digest Algorithm".
*/
package tod.impl.dbgrid;


import static org.junit.Assert.fail;
import tod.core.ILogCollector;
import tod.core.database.event.IArrayWriteEvent;
import tod.core.database.event.IBehaviorExitEvent;
import tod.core.database.event.IConstructorChainingEvent;
import tod.core.database.event.IExceptionGeneratedEvent;
import tod.core.database.event.IFieldWriteEvent;
import tod.core.database.event.IInstanceOfEvent;
import tod.core.database.event.IInstantiationEvent;
import tod.core.database.event.ILocalVariableWriteEvent;
import tod.core.database.event.ILogEvent;
import tod.core.database.event.IMethodCallEvent;
import tod.core.database.event.INewArrayEvent;
import tod.core.database.event.IOutputEvent;
import tod.core.database.structure.ILocationInfo;
import tod.impl.dbgrid.db.EventDatabase;
import tod.impl.dbgrid.messages.GridEvent;
import zz.utils.Utils;


public class Fixtures
{

	public static GridMaster setupLocalMaster()
	{
		return DBGridUtils.setupLocalMaster(null);
	}
	
	public static void assertEquals(String aMessage, GridEvent aRefEvent, GridEvent aEvent)
	{
		if (! Utils.fieldsEqual(aRefEvent, aEvent, false)) 
		{
			System.out.println("ref:  "+aRefEvent);
			System.out.println("test: "+aEvent);
			fail(aMessage);
		}
	}

	public static void assertEquals(String aMessage, ILogEvent aRefEvent, ILogEvent aEvent)
	{
		if (! Utils.fieldsEqual(aRefEvent, aEvent, false)) 
		{
			System.out.println("ref:  "+aRefEvent);
			System.out.println("test: "+aEvent);
			fail(aMessage);
		}
	}
	
	/**
	 * Fills a database node with events generated by the specified generator.
	 */
	public static void fillDatabase(EventDatabase aDatabase, EventGenerator aGenerator, long aCount)
	{
		for(long i=0;i<aCount;i++) 
		{
			aDatabase.push(aGenerator.next());
			if (i % 100000 == 0) System.out.println(i);
		}
		aDatabase.flush(null);
	}
	
	public static void fillDatabase(GridMaster aMaster, EventGenerator aGenerator, long aCount)
	{
		ILogCollector theCollector = aMaster._getCollector();
		
		for(long i=0;i<aCount;i++) 
		{
			GridEvent theNext = aGenerator.next();
			ILogEvent theLogEvent = theNext.toLogEvent(aMaster._getLocalLogBrowser());
			dispatch(theLogEvent, theCollector);
			if (i % 100000 == 0) System.out.println(i);
		}
		
		aMaster.flush();
	}
	
	public static void dispatch(ILogEvent aEvent, ILogCollector aCollector)
	{
		if (aEvent instanceof IArrayWriteEvent)
		{
			IArrayWriteEvent theEvent = (IArrayWriteEvent) aEvent;
			aCollector.arrayWrite(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id, 
					theEvent.getTarget(), 
					theEvent.getIndex(), 
					theEvent.getValue());
		}
		else if (aEvent instanceof IConstructorChainingEvent)
		{
			IConstructorChainingEvent theEvent = (IConstructorChainingEvent) aEvent;
			aCollector.superCall(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.isDirectParent(),
					getId(theEvent.getCalledBehavior()),
					getId(theEvent.getExecutedBehavior()),
					theEvent.getTarget(),
					theEvent.getArguments());
		}
		else if (aEvent instanceof IInstantiationEvent)
		{
			IInstantiationEvent theEvent = (IInstantiationEvent) aEvent;
			aCollector.instantiation(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.isDirectParent(),
					getId(theEvent.getCalledBehavior()),
					getId(theEvent.getExecutedBehavior()),
					theEvent.getTarget(),
					theEvent.getArguments());
		}
		else if (aEvent instanceof IMethodCallEvent)
		{
			IMethodCallEvent theEvent = (IMethodCallEvent) aEvent;
			aCollector.methodCall(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.isDirectParent(),
					getId(theEvent.getCalledBehavior()),
					getId(theEvent.getExecutedBehavior()),
					theEvent.getTarget(),
					theEvent.getArguments());
		}
		else if (aEvent instanceof IBehaviorExitEvent)
		{
			IBehaviorExitEvent theEvent = (IBehaviorExitEvent) aEvent;
			aCollector.behaviorExit(	
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.getProbeInfo().behaviorId,
					theEvent.hasThrown(),
					theEvent.getResult());
		}
		else if (aEvent instanceof IExceptionGeneratedEvent)
		{
			IExceptionGeneratedEvent theEvent = (IExceptionGeneratedEvent) aEvent;
			aCollector.exception(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.getException());
		}
		else if (aEvent instanceof IFieldWriteEvent)
		{
			IFieldWriteEvent theEvent = (IFieldWriteEvent) aEvent;
			aCollector.fieldWrite(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					getId(theEvent.getField()),
					theEvent.getTarget(),
					theEvent.getValue());
		}
		else if (aEvent instanceof IInstanceOfEvent)
		{
			IInstanceOfEvent theEvent = (IInstanceOfEvent) aEvent;
			aCollector.instanceOf(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.getObject(),
					getId(theEvent.getTestedType()),
					theEvent.getResult());
		}
		else if (aEvent instanceof ILocalVariableWriteEvent)
		{
			ILocalVariableWriteEvent theEvent = (ILocalVariableWriteEvent) aEvent;
			aCollector.localWrite(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.getVariable().getIndex(),
					theEvent.getValue());
		}
		else if (aEvent instanceof INewArrayEvent)
		{
			INewArrayEvent theEvent = (INewArrayEvent) aEvent;
			aCollector.newArray(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(), 
					theEvent.getProbeInfo().id,
					theEvent.getInstance(),
					theEvent.getType().getElementType().getId(),
					theEvent.getArraySize());
		}
		else if (aEvent instanceof IOutputEvent)
		{
			IOutputEvent theEvent = (IOutputEvent) aEvent;
			aCollector.output(
					theEvent.getThread().getId(), 
					theEvent.getParentPointer().getTimestamp(), 
					(short) theEvent.getDepth(), 
					theEvent.getTimestamp(), 
					theEvent.getAdviceCFlow(),
					theEvent.getOutput(),
					theEvent.getData().getBytes());
		}
		else throw new RuntimeException("Not handled: "+aEvent);
	}

	private static int getId(ILocationInfo aLocation)
	{
		return aLocation != null ? aLocation.getId() : 0;
	}
}
